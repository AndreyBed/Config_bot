from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

TOKEN = '1659069813:AAGlRZ2pqTT65ngH_qUuHph-z3LqLvs7UkU'

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    square_ = State()
    number_floors_ = State()
    type_found_ = State()
    material_ = State()
    type_roof_ = State()


class Inline:
    start_inline = types.InlineKeyboardMarkup()
    start_button = types.InlineKeyboardButton(text='Start', callback_data='start')
    info_button = types.InlineKeyboardButton(text='Info', callback_data='info')
    start_inline.insert(start_button)
    start_inline.insert(info_button)

    restart_inline = types.InlineKeyboardMarkup()
    restart_button = types.InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='start')
    info_button = types.InlineKeyboardButton(text='Info', callback_data='info')
    restart_inline.insert(restart_button)
    restart_inline.insert(info_button)

    restart_inline_ = types.InlineKeyboardMarkup()
    restart_button_ = types.InlineKeyboardButton(text='–û–∫, –ø–æ–Ω—è–ª üëå', callback_data='start')
    restart_inline_.insert(restart_button_)

    foundation_inline = types.InlineKeyboardMarkup()
    tape_button = types.InlineKeyboardButton(text='–õ–µ–Ω—Ç–æ—á–Ω—ã–π', callback_data='tape')
    pile_button = types.InlineKeyboardButton(text='–°–≤–∞–π–Ω—ã–π', callback_data='pile')
    plate_button = types.InlineKeyboardButton(text='–ü–ª–∏—Ç–Ω—ã–π', callback_data='plate')
    foundation_inline.insert(tape_button)
    foundation_inline.insert(pile_button)
    foundation_inline.add(plate_button)

    material_inline = types.InlineKeyboardMarkup()
    bar_button = types.InlineKeyboardButton(text='–ë—Ä—É—Å', callback_data='bar')
    aerated_concrete_block_button = types.InlineKeyboardButton(text='–ì–∞–∑–æ–±–µ—Ç–æ–Ω', callback_data='ac_block')
    ceramic_block_button = types.InlineKeyboardButton(text='–ö–µ—Ä–∞–º–æ–±–ª–æ–∫', callback_data='ceramic_block')
    brick_button = types.InlineKeyboardButton(text='–ö–∏—Ä–ø–∏—á', callback_data='brick')
    door_button = types.InlineKeyboardButton(text='–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å', callback_data='door')
    material_inline.insert(bar_button)
    material_inline.insert(ceramic_block_button)
    material_inline.add(aerated_concrete_block_button)
    material_inline.insert(brick_button)
    material_inline.add(door_button)

    roof_inline = types.InlineKeyboardMarkup()
    sheet_button = types.InlineKeyboardButton(text='–õ–∏—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='sheet')
    flexible_button = types.InlineKeyboardButton(text='–ì–∏–±–∫–∞—è –∫—Ä–æ–≤–ª—è', callback_data='flex')
    ceramic_roof_button = types.InlineKeyboardButton(text='–®—Ç—É—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='ceramic_roof')
    roof_inline.insert(sheet_button)
    roof_inline.add(flexible_button)
    roof_inline.add(ceramic_roof_button)

    result_inline = types.InlineKeyboardMarkup()
    result_button = types.InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏', callback_data='result')
    result_inline.insert(result_button)

    info_inline = types.InlineKeyboardMarkup()
    found_button = types.InlineKeyboardButton(text='–§—É–Ω–¥–∞–º–µ–Ω—Ç', callback_data='info_found')
    material_button = types.InlineKeyboardButton(text='–°—Ç–µ–Ω–æ–≤–æ–π –∫–æ–º–ø–ª–µ–∫—Ç', callback_data='info_material')
    roof_button = types.InlineKeyboardButton(text='–ö—Ä–æ–≤–ª—è', callback_data='info_roof')
    info_inline.insert(found_button)
    info_inline.insert(roof_button)
    info_inline.add(material_button)

    info_found_inline = types.InlineKeyboardMarkup()
    info_tape_button = types.InlineKeyboardButton(text='–õ–µ–Ω—Ç–æ—á–Ω—ã–π', callback_data='info_tape')
    info_pile_button = types.InlineKeyboardButton(text='–°–≤–∞–π–Ω—ã–π', callback_data='info_pile')
    info_plate_button = types.InlineKeyboardButton(text='–ü–ª–∏—Ç–Ω—ã–π', callback_data='info_plate')
    info_found_inline.insert(info_tape_button)
    info_found_inline.insert(info_pile_button)
    info_found_inline.add(info_plate_button)

    info_material_inline = types.InlineKeyboardMarkup()
    info_bar_button = types.InlineKeyboardButton(text='–ë—Ä—É—Å', callback_data='info_bar')
    info_aerated_concrete_block_button = types.InlineKeyboardButton(text='–ì–∞–∑–æ–±–µ—Ç–æ–Ω', callback_data='info_ac_block')
    info_ceramic_block_button = types.InlineKeyboardButton(text='–ö–µ—Ä–∞–º–æ–±–ª–æ–∫', callback_data='info_ceramic_block')
    info_brick_button = types.InlineKeyboardButton(text='–ö–∏—Ä–ø–∏—á', callback_data='info_brick')
    info_door_button = types.InlineKeyboardButton(text='–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å', callback_data='info_door')
    info_material_inline.insert(info_bar_button)
    info_material_inline.insert(info_ceramic_block_button)
    info_material_inline.add(info_aerated_concrete_block_button)
    info_material_inline.insert(info_brick_button)
    info_material_inline.add(info_door_button)

    info_roof_inline = types.InlineKeyboardMarkup()
    info_sheet_button = types.InlineKeyboardButton(text='–õ–∏—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='info_sheet')
    info_flexible_button = types.InlineKeyboardButton(text='–ì–∏–±–∫–∞—è –∫—Ä–æ–≤–ª—è', callback_data='info_flex')
    info_ceramic_roof_button = types.InlineKeyboardButton(text='–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è —á–µ—Ä–µ–ø–Ω–∏—Ü–∞',
                                                          callback_data='info_ceramic_roof')
    info_roof_inline.insert(info_sheet_button)
    info_roof_inline.add(info_flexible_button)
    info_roof_inline.add(info_ceramic_roof_button)


@dp.message_handler()
async def start(msg: types.Message):
    print(msg.from_user.full_name)
    await bot.send_message(msg.from_user.id, '–ü—Ä–∏–≤–µ—Ç!\n–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É –∑–∞—Ç—Ä–∞—Ç –Ω–∞ '
                                             '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞ üè†\n–ù–∞—á–Ω–µ–º?)',
                           reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'start')
async def square(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, '–ö–∞–∫—É—é –ø–ª–æ—â–∞–¥—å –≤ –º¬≤ –Ω–∞ —É—á–∞—Å—Ç–∫–µ –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ–º?\n')
    await Form.square_.set()


@dp.message_handler(state=Form.square_)
async def numbers(msg: types.Message, state: FSMContext):
    k = 0
    try:
        int(msg.text)
    except ValueError:
        await bot.send_message(msg.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö, –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ '
                                                 '–Ω—É–∂–Ω–æ\n–ü—Ä–∏–º–µ—Ä: 210', reply_markup=Inline.restart_inline_)
        await state.finish()
        k = 1
    if k == 0:
        async with state.proxy() as data:
            data['square_'] = msg.text
        await Form.next()
        await bot.send_message(msg.from_user.id, '–ê —Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?')


@dp.message_handler(state=Form.number_floors_)
async def found(msg: types.Message, state: FSMContext):
    k = 0
    try:
        int(msg.text)
    except ValueError:
        await bot.send_message(msg.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π, –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ '
                                                 '–Ω—É–∂–Ω–æ\n–ü—Ä–∏–º–µ—Ä: 2', reply_markup=Inline.restart_inline_)
        await state.finish()
        k = 1
    if k == 0:
        async with state.proxy() as data:
            data['number_floors_'] = msg.text
        await Form.next()
        await bot.send_message(msg.from_user.id, '–ö–∞–∫–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —Ö–æ—á–µ—à—å?', reply_markup=Inline.foundation_inline)


@dp.callback_query_handler(lambda c: c.data == 'tape', state=Form.type_found_)
async def tape(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type_found_'] = 1
    await Form.next()
    await bot.send_message(call.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–º–∞',
                           reply_markup=Inline.material_inline)


@dp.callback_query_handler(lambda c: c.data == 'pile', state=Form.type_found_)
async def pile(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type_found_'] = 2
    await Form.next()
    await bot.send_message(call.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–º–∞',
                           reply_markup=Inline.material_inline)


@dp.callback_query_handler(lambda c: c.data == 'plate', state=Form.type_found_)
async def plate(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type_found_'] = 3
    await Form.next()
    await bot.send_message(call.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–º–∞',
                           reply_markup=Inline.material_inline)


@dp.callback_query_handler(lambda c: c.data == 'bar', state=Form.material_)
async def bar(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['material_'] = 1
    await Form.next()
    await bot.send_message(call.from_user.id, '–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ\n–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥–µ—Ç –∫—Ä–æ–≤–ª—è?',
                           reply_markup=Inline.roof_inline)


@dp.callback_query_handler(lambda c: c.data == 'ac_block', state=Form.material_)
async def ac_block(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['material_'] = 2
    await Form.next()
    await bot.send_message(call.from_user.id, '–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ\n–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥–µ—Ç –∫—Ä–æ–≤–ª—è?',
                           reply_markup=Inline.roof_inline)


@dp.callback_query_handler(lambda c: c.data == 'ceramic_block', state=Form.material_)
async def ceramick_block(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['material_'] = 3
    await Form.next()
    await bot.send_message(call.from_user.id, '–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ\n–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥–µ—Ç –∫—Ä–æ–≤–ª—è?',
                           reply_markup=Inline.roof_inline)


@dp.callback_query_handler(lambda c: c.data == 'brick', state=Form.material_)
async def brick(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['material_'] = 4
    await Form.next()
    await bot.send_message(call.from_user.id, '–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ\n–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥–µ—Ç –∫—Ä–æ–≤–ª—è?',
                           reply_markup=Inline.roof_inline)


@dp.callback_query_handler(lambda c: c.data == 'door', state=Form.material_)
async def door(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['material_'] = 5
    await Form.next()
    await bot.send_message(call.from_user.id, '–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ\n–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥–µ—Ç –∫—Ä–æ–≤–ª—è?',
                           reply_markup=Inline.roof_inline)


@dp.callback_query_handler(lambda c: c.data == 'sheet', state=Form.type_roof_)
async def sheet(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type_roof_'] = 1
    await bot.send_message(call.from_user.id, '–û–∫, –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª üëå', reply_markup=Inline.result_inline)


@dp.callback_query_handler(lambda c: c.data == 'flex', state=Form.type_roof_)
async def flex(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type_roof_'] = 2
    await bot.send_message(call.from_user.id, '–û–∫, –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª üëå', reply_markup=Inline.result_inline)


@dp.callback_query_handler(lambda c: c.data == 'ceramic_roof', state=Form.type_roof_)
async def ceramic_roof(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type_roof_'] = 3
    await bot.send_message(call.from_user.id, '–û–∫, –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª üëå', reply_markup=Inline.result_inline)


@dp.callback_query_handler(lambda c: c.data == 'info')
async def info(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, '–ü–æ –∫–∞–∫–æ–º—É —Ä–∞–∑–¥–µ–ª—É –≤–æ–ø—Ä–æ—Å?', reply_markup=Inline.info_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_found')
async def info_button(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞', reply_markup=Inline.info_found_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_tape')
async def info_tape(call: types.CallbackQuery):
    photo = open('photos/tape.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–≠—Ç–æ—Ç –≤–∏–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω –≤ —á–∞—Å—Ç–Ω–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ. '
                                              '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ –ª–µ–Ω—Ç–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–æ–Ω–æ–ª–∏—Ç–Ω—É—é '
                                              '–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∏–¥—É—â—É—é –ø–æ –≤—Å–µ–º—É –ø–µ—Ä–∏–º–µ—Ç—Ä—É –¥–æ–º–∞ –∏ –ø–æ–¥ –≤—Å–µ–º–∏ '
                                              '–Ω–µ—Å—É—â–∏–º–∏ —Å—Ç–µ–Ω–∞–º–∏. –ß–∞—Å—Ç–æ –∑–∞–ª–∏–≤–∞–µ—Ç—Å—è –±–µ—Ç–æ–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥ '
                                              '–ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞–º–∏.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_pile')
async def imfo_pile(call: types.CallbackQuery):
    photo = open('photos/pile.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∏ –º–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω–æ–º –∂–∏–ª–æ–º '
                                              '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ. –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ –ø—Ä–∏ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö —á–∞—Å—Ç–Ω—ã—Ö '
                                              '–¥–æ–º–æ–≤ –∏ –∫–æ—Ç—Ç–µ–¥–∂–µ–π –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. –ï—Å–ª–∏ –ø—Ä–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ '
                                              '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º —Å–ø–æ—Å–æ–±–æ–º –Ω–∞ —Å–≤–∞–π–Ω—ã—Ö —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞—Ö —Å—Ç—Ä–æ—è—Ç –¥–æ–º–∞ –∏–∑ –ª—é–±—ã—Ö '
                                              '–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ç–æ –≤ —á–∞—Å—Ç–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ –Ω–∞ —Å–≤–∞—è—Ö —Å—Ç–æ—è—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ª–µ–≥–∫–∏–µ '
                                              '—Å–æ–æ—Ä—É–∂–µ–Ω–∏—è –∏–∑ –°–ò–ü-–ø–∞–Ω–µ–ª–µ–π, –±—Ä—É—Å–∞, –±—Ä–µ–≤–Ω–∞.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_plate')
async def info_plate(call: types.CallbackQuery):
    photo = open('photos/plate.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–û—Å–Ω–æ–≤–∞–Ω–∏—è –¥–æ–º–∞ –≤ –≤–∏–¥–µ —Å–ø–ª–æ—à–Ω–æ–π –∏–ª–∏ —Å–±–æ—Ä–Ω–æ–π –ø–ª–∏—Ç—ã –Ω–∞ –≤—Å—é –ø–ª–æ—â–∞–¥—å –∑–¥–∞–Ω–∏—è '
                                              '–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã, —á–µ–º –ª–µ–Ω—Ç–æ—á–Ω—ã–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ã, –Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö '
                                              '—è–≤–ª—è—é—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º. –ü—Ä–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –Ω–∞ '
                                              '–Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö, –ø–µ—Å—á–∞–Ω–æ-–≥–ª–∏–Ω–∏—Å—Ç—ã—Ö, –≤—Å–ø—É—á–∏–≤–∞—é—â–∏—Ö—Å—è –≥—Ä—É–Ω—Ç–∞—Ö, –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º '
                                              '–∑–∞–ª–µ–≥–∞–Ω–∏–∏ –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –≤–æ–¥ (–≤—ã—à–µ 1 –º), –≥–ª—É–±–æ–∫–æ –ø—Ä–æ–º–µ—Ä–∑–∞—é—â–∏—Ö –ø–æ—á–≤–∞—Ö, –ª—É—á—à–µ '
                                              '–≤—Å–µ–≥–æ –∑–∞–ª–∏—Ç—å —Å–ø–ª–æ—à–Ω—É—é –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—É—é –ø–ª–∏—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–≤–æ–¥—è—Ç—Å—è –∑–¥–∞–Ω–∏—è'
                                              ' –ª—é–±–æ–π —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏. –î–ª—è –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö –æ–¥–Ω–æ –∏ –¥–≤—É—Ö—ç—Ç–∞–∂–Ω—ã—Ö –¥–æ–º–æ–≤ –ø–ª–∏—Ç–Ω—ã–π '
                                              '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –û–Ω –º–µ–Ω–µ–µ —Å–ª–æ–∂–Ω—ã–π, —á–µ–º –ª–µ–Ω—Ç–æ—á–Ω—ã–π'
                                              ' –∏ —Å–≤–∞–π–Ω—ã–π, –Ω–æ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –Ω–∏–º–∏ –±–æ–ª–µ–µ –∑–∞—Ç—Ä–∞—Ç–Ω—ã–π –≤ –ø–ª–∞–Ω–µ —Ä–∞—Å—Ö–æ–¥–∞ '
                                              '–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_material')
async def info_material(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, '–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–µ–Ω–æ–≤–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞ –¥–æ–º–∞',
                           reply_markup=Inline.info_material_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_bar')
async def info_bar(call: types.CallbackQuery):
    photo = open('photos/bar.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–ò–º–µ–Ω–Ω–æ –±—Ä—É—Å—É –≤—Å–µ —á–∞—â–µ –æ—Ç–¥–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–≥–æ –Ω–∞–∑–≤–∞—Ç—å '
                                              '–º–∞—Ç–µ—Ä–∏–∞–ª–æ–º ‚Ññ 1 –≤ –º–∞–ª–æ—ç—Ç–∞–∂–Ω–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ. –î–∞–Ω–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è –ª–µ–≥–∫–æ '
                                              '–æ–±—ä—è—Å–Ω–∏–º–∞. –°—Ä–∞–≤–Ω–∏–≤–∞—è –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –¥–æ–º–∞ –∏–∑ –±—Ä—É—Å–∞, –Ω–µ—Å–ª–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –∫ '
                                              '–∑–∞–∫–ª—é—á–µ–Ω–∏—é, —á—Ç–æ —Ç–∞–∫–∏–µ —Å—Ç—Ä–æ–µ–Ω–∏—è –∏–º–µ—é—Ç —Ä—è–¥ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –Ω–∞–¥ '
                                              '–∫–æ—Ç—Ç–µ–¥–∂–∞–º–∏, –¥–∞—á–∞–º–∏, –æ—Å–æ–±–Ω—è–∫–∞–º–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∏–∑ –ø–µ–Ω–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—á–∏—Ö '
                                              '–±–ª–æ–∫–æ–≤, –±—Ä–µ–≤–Ω–∞, —Å–∏–ª–∏–∫–∞—Ç–Ω–æ–≥–æ –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ –≥–ª–∏–Ω—è–Ω–æ–≥–æ –∫–∏—Ä–ø–∏—á–∞.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_ac_block')
async def info_ac_block(call: types.CallbackQuery):
    photo = open('photos/ac_block.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–ì–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è, –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞—Ä—É–∂–Ω—ã—Ö –∏ '
                                              '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç–µ–Ω –∂–∏–ª—ã—Ö –¥–æ–º–æ–≤, –º–∞–≥–∞–∑–∏–Ω–æ–≤, –æ—Ñ–∏—Å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π, —Ñ–µ—Ä–º. –¢–∞–∫—É—é '
                                              '–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª—É—á–∏–ª –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–∏–º '
                                              '–≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–∞–º. –¢–∞–∫–∂–µ –∫ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞–º '
                                              '–≥–∞–∑–æ–±–µ—Ç–æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤—ã—Å–æ–∫–∞—è —Å—Ç–µ–ø–µ–Ω—å –ø–æ–∂–∞—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ '
                                              '–º–∞–ª—ã–π –≤–µ—Å –±–ª–æ–∫–æ–≤ –∏ –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å —É–∫–ª–∞–¥–∫–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å '
                                              '–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π –ø–æ –∫–∏—Ä–ø–∏—á—É.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_ceramic_block')
async def info_ceramic_block(call: types.CallbackQuery):
    photo = open('photos/ceramic_block.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–ö–µ—Ä–∞–º–æ–±–ª–æ–∫–∏ - —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è —Å—Ç–µ–Ω –±–µ–∑ '
                                              '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∏—Ö —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—é. –°—Ü–µ–ø–ª–µ–Ω–∏—è ¬´–ø–∞–∑-–≥—Ä–µ–±–µ–Ω—å¬ª '
                                              '—Å–∫—Ä–µ–ø–ª—è—é—Ç –±–ª–æ–∫–∏ –±–µ–∑ —Ä–∞—Å—Ç–≤–æ—Ä–∞, —á—Ç–æ –¥–∞—ë—Ç —ç–∫–æ–Ω–æ–º–∏—é –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ '
                                              '—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞. –ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∫–∏—Ä–ø–∏—á–æ–º —Ä–∞—Å—Ç–≤–æ—Ä–∞ '
                                              '–ø—Ä–∏ —É–∫–ª–∞–¥–∫–µ –∫–µ—Ä–∞–º–æ–±–ª–æ–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–µ–Ω—å—à–µ –≤ 2-3 —Ä–∞–∑–∞.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_brick')
async def info_brick(call: types.CallbackQuery):
    photo = open('photos/brick.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–ö–∏—Ä–ø–∏—á —Å–µ–≥–æ–¥–Ω—è ‚Äì –æ–¥–∏–Ω –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'
                                              ' –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π: –æ—Ç –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–±–æ—Ä–æ–≤, –¥–æ'
                                              ' –≤—ã—Å–æ—Ç–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –∏ —Ä–æ—Å–∫–æ—à–Ω—ã—Ö –≤–∏–ª–ª. –ö–∏—Ä–ø–∏—á ‚Äì —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å '
                                              '–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥–æ–º —Ñ–æ—Ä–º–æ–≤–∫–∏ –∏ '
                                              '–ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–∂–∏–≥–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–º.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_door')
async def info_door(call: types.CallbackQuery):
    photo = open('photos/door.png', 'rb')
    await bot.send_message(call.from_user.id, '–î–æ–º–∞ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞—Ä–∫–∞—Å–Ω—ã–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Ö –æ—Å–Ω–æ–≤–æ–π —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ä–∫–∞—Å –∏–∑ '
                                              '–±—Ä—É—Å—å–µ–≤, –∫–æ—Ç–æ—Ä—ã–π –æ–±—à–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–Ω–µ—Ä–æ–π –∏–ª–∏ OSB-–ø–ª–∏—Ç–∞–º–∏. –í –Ω–∞—Ä–æ–¥–µ –ø–æ–¥–æ–±–Ω—ã–µ '
                                              '—Å–æ–æ—Ä—É–∂–µ–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ "–∑–∞—Å—ã–ø–Ω—ã—Ö" –¥–æ–º–æ–≤. –í—Å—ë –¥–µ–ª–æ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ '
                                              '—à–ª–∞–∫–∞, –æ–ø–∏–ª–æ–∫ –∏–ª–∏ –∏—Ö —Å–º–µ—Å–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è –≤ —Ç–∞–∫–∏—Ö –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö '
                                              '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_roof')
async def info_roof(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –∫—Ä–æ–≤–ª–∏', reply_markup=Inline.info_roof_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_sheet')
async def info_sheet(call: types.CallbackQuery):
    photo = open('photos/sheet.jfif', 'rb')
    await bot.send_message(call.from_user.id, '–°–∞–º—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Ç–∏–ø –∫—Ä–æ–≤–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è ‚Äì '
                                              '—ç—Ç–æ –º–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞. –ß–µ–º –æ–Ω–∞ –∑–∞—Å–ª—É–∂–∏–ª–∞ —Ç–∞–∫–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ? –ï–µ –æ—Ç–ª–∏—á–∞–µ—Ç '
                                              '—ç—Å—Ç–µ—Ç–∏—á–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, –ø—Ä–æ—á–Ω–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –∞ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ '
                                              '–ø—Ä–æ—Å—Ç–æ–π –º–æ–Ω—Ç–∞–∂. –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ª–∏—Å—Ç—ã –æ–±–ª–∞–¥–∞—é—Ç –≤—ã—Å–æ–∫–æ–π —Å—Ç–µ–ø–µ–Ω—å—é '
                                              '—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –∫–æ—Ä—Ä–æ–∑–∏–∏, –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é –æ—Å–∞–¥–∫–æ–≤ –∏ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_flex')
async def info_flex(call: types.CallbackQuery):
    photo = open('photos/flex.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–£ –≥–∏–±–∫–æ–π —á–µ—Ä–µ–ø–∏—Ü—ã –º–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–π: –º—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è, –±–∏—Ç—É–º–Ω–∞—è —á–µ—Ä–µ–ø–∏—Ü–∞, '
                                              '–∫—Ä–æ–≤–µ–ª—å–Ω–∞—è –ø–ª–∏—Ç–∫–∞, —à–∏–Ω–≥–ª–∞—Å, –≥–æ–Ω—Ç. –í—Å–µ —ç—Ç–æ –ø–ª–æ—Å–∫–∏–µ –ª–∏—Å—Ç—ã-–º–æ–¥—É–ª–∏ '
                                              '–Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å —Ñ–∏–≥—É—Ä–Ω—ã–º –≤—ã—Ä–µ–∑–æ–º –ø–æ –æ–¥–Ω–æ–º—É –∫—Ä–∞—é, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–ª–∞–¥—ã–≤–∞—é—Ç'
                                              ' –≤–Ω–∞—Ö–ª–µ—Å—Ç. –ò—Ö –≤—ã–ø—É—Å–∫–∞—é—Ç –≤–æ –≤—Å–µ–º –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–∏ —Ñ–æ—Ä–º –∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π. '
                                              '–ì–∏–±–∫—É—é –∫—Ä–æ–≤–ª—é –ø—Ä–∏–º–µ–Ω—è—é—Ç –Ω–∞ –∫—Ä—ã—à–∞—Ö —Å —É–∫–ª–æ–Ω–æ–º –æ—Ç 12¬∞ ‚Äî –∫–∞–∫ –ø—Ä–∏ —É–∫–ª–∞–¥–∫–µ '
                                              '–Ω–æ–≤–æ–π –∫—Ä–æ–≤–ª–∏, —Ç–∞–∫ –∏ –ø—Ä–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—Ä–æ–≤–µ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π. '
                                              '–ú—è–≥–∫–∞—è —á–µ—Ä–µ–ø–∏—Ü–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∫–æ—Ç—Ç–µ–¥–∂–µ–π, –∑–¥–∞–Ω–∏–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ '
                                              '–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ '
                                              '—Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –∫—Ä—ã—à–∞ –∏–º–µ–µ—Ç —Å–ª–æ–∂–Ω—É—é —Ñ–æ—Ä–º—É.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'info_ceramic_roof')
async def info_ceramic_roof(call: types.CallbackQuery):
    photo = open('photos/ceramic_roof.jpg', 'rb')
    await bot.send_message(call.from_user.id, '–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è —á–µ—Ä–µ–ø–∏—Ü–∞ ‚Äì –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –¥—Ä–µ–≤–Ω–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è '
                                              '–∫—Ä—ã—à–∏. –ï—ë –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—ã—Å—è—á–µ–ª–µ—Ç–∏–π, –∏ –¥–∞–∂–µ —Å–µ–≥–æ–¥–Ω—è –æ–Ω–∞ '
                                              '—Å—á–∏—Ç–∞–µ—Ç—Å—è –º–æ–¥–Ω—ã–º –∏ –¥–∞–∂–µ —É—Å–ø–µ–ª–∞ —Å—Ç–∞—Ç—å —ç–ª–∏—Ç–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º. –¢–∞–∫–∞—è '
                                              '–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ª–µ–≥–∫–æ –æ–±—ä—è—Å–Ω–∏–º–∞: –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –∫—Ä–æ–≤–ª—è –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ '
                                              '—Å–º–æ—Ç—Ä–∏—Ç—Å—è ‚Äì –æ–Ω–∞ –µ—â—ë –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–∞, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞, –æ–≥–Ω–µ—Å—Ç–æ–π–∫–∞ –∏ –Ω–∞ –≤—Å–µ '
                                              '100% —è–≤–ª—è–µ—Ç—Å—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç–æ–π.')
    await bot.send_photo(call.from_user.id, photo, reply_markup=Inline.start_inline)


@dp.callback_query_handler(lambda c: c.data == 'result', state=Form.type_roof_)
async def result(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.finish()
    square_ = int(data['square_'])
    number_floors = int(data['number_floors_'])
    type_foundation = int(data['type_found_'])
    material = int(data['material_'])
    roof_type = int(data['type_roof_'])
    summa = 0

    elements = square_ / 25

    if type_foundation == 1:  # –õ–µ–Ω—Ç–æ—á–Ω—ã–π
        concrete_volume = elements * 5.2
        fittings = elements * 80
        summa_foundation = int(concrete_volume * 3000 + fittings * 50)
        summa += summa_foundation
    elif type_foundation == 2:  # –°–≤–∞–π–Ω—ã–π
        concrete_volume = elements * 5.2
        fittings = elements * 80
        number_piles = int(elements * 12)
        summa_foundation = int(concrete_volume * 3000 + number_piles * 2000 + fittings * 50)
        summa += summa_foundation
    elif type_foundation == 3:  # –ü–ª–∏—Ç–Ω—ã–π
        concrete_volume = square_ * 0.3
        fittings = concrete_volume / 6.3 * 523
        summa_foundation = int(concrete_volume * 3000 + fittings * 50)
        summa += summa_foundation

    if material == 1:  # –ë—Ä—É—Å
        bar_ = elements * 15 * number_floors
        summa_material = int(bar_ * 25000)
        summa += summa_material
    elif material == 2:  # –ì–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –±–ª–æ–∫
        aerated_concrete_block = elements * 400 * number_floors
        summa_material = int(aerated_concrete_block * 3000)
        summa += summa_material
    elif material == 3:  # –ö–µ—Ä–∞–º–æ–±–ª–æ–∫
        ceramic_block = elements * 900 * number_floors
        summa_material = int(ceramic_block * 120)
        summa += summa_material
    elif material == 4:  # –ö–∏—Ä–ø–∏—á
        brick_ = elements * 6000 * number_floors
        summa_material = int(brick_ * 19)
        summa += summa_material
    elif material == 5:  # –î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å
        racks = elements * 53 * number_floors
        summa_racks = int(racks * 110)
        overlap = elements * 20 * number_floors
        summa_overlap = int(overlap * 1000)
        summa_material = summa_racks + summa_overlap
        summa += summa_material

    if roof_type == 1:  # –õ–∏—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        sheet_material = elements * 37
        summa_roof = int(sheet_material * 500)
        summa += summa_roof
    elif roof_type == 2:  # –ì–∏–±–∫–∞—è –∫—Ä–æ–≤–ª—è
        flexible_roof = elements * 13
        summa_roof = int(flexible_roof * 500)
        summa += summa_roof
    elif roof_type == 3:  # –®—Ç—É—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        ceramic_roof_ = elements * 37
        summa_roof = int(ceramic_roof_ * 4000)
        summa += summa_roof
    print(summa_foundation, summa_material, summa_roof, summa)

    summa_foundation = str(summa_foundation)
    summa_foundation = summa_foundation[::-1]
    summa_foundation = '.'.join([summa_foundation[i:i + 3] for i in range(0, len(summa_foundation), 3)])
    summa_foundation = summa_foundation[::-1]

    summa_material = str(summa_material)
    summa_material = summa_material[::-1]
    summa_material = '.'.join([summa_material[i:i + 3] for i in range(0, len(summa_material), 3)])
    summa_material = summa_material[::-1]

    summa_roof = str(summa_roof)
    summa_roof = summa_roof[::-1]
    summa_roof = '.'.join([summa_roof[i:i + 3] for i in range(0, len(summa_roof), 3)])
    summa_roof = summa_roof[::-1]

    summa = str(summa)
    summa = summa[::-1]
    summa = '.'.join([summa[i:i + 3] for i in range(0, len(summa), 3)])
    summa = summa[::-1]

    text = '–§—É–Ω–¥–∞–º–µ–Ω—Ç:  {0} —Ä.\n–°—Ç–µ–Ω–æ–≤–æ–π –∫–æ–º–ø–ª–µ–∫—Ç:  {1} —Ä.\n–ö—Ä–æ–≤–ª—è:  {2} —Ä.\n\n–ò—Ç–æ–≥–æ:  {3} —Ä.'.format(summa_foundation,
                                                                                                      summa_material,
                                                                                                      summa_roof,
                                                                                                      summa)
    await bot.send_message(call.from_user.id, text, reply_markup=Inline.restart_inline)
    await bot.send_message(1471718311, 'User {0} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–æ–º\n{1}'.format(call.from_user.full_name,
                                                                                            text))


if __name__ == '__main__':
    executor.start_polling(dp)
